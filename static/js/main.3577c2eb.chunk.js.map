{"version":3,"sources":["index.js"],"names":["StickerBoard","props","state","file","imagePreviewUrl","stickers","Array","graff","e","url","preventDefault","this","localStorage","getItem","_renderSticker","setState","stickerz","concat","_clearPreview","reader","FileReader","target","files","onloadend","result","readAsDataURL","Sticker","$imagePreview","$fileControls","$postButton","className","Drawer","type","onClick","_handleSubmit","title","id","onChange","_handleImageChange","for","src","alt","map","variant","Item","as","onSubmit","React","Component","class","_handleColorChange","color","event","brushColor","hex","parent","createRef","value","brushRadius","width","height","showPicker","$colorPicker","triangle","onChangeComplete","ref","style","backgroundColor","canvasElem","clear","setItem","canvas","drawing","toDataURL","undo","name","min","max","step","canvasWidth","canvasHeight","canvasDraw","hideGrid","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3577c2eb.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport CanvasDraw from \"react-canvas-draw\";\r\n\r\nimport { BlockPicker } from 'react-color';\r\n\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nimport './index.css';\r\n\r\nclass StickerBoard extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {file: '',\r\n      imagePreviewUrl: '', \r\n      stickers: Array(),\r\n      graff: null\r\n    };\r\n    }\r\n  \r\n    _handleSubmit(e) {\r\n      e.preventDefault();\r\n      let url;\r\n      if (!this.state.graff){\r\n        url = this.state.imagePreviewUrl;\r\n        this._renderSticker(this.state.file);\r\n      } else {       \r\n        url = localStorage.getItem('graff');\r\n       \r\n        this._renderSticker(url);\r\n        this.setState({\r\n          file: localStorage.getItem('graff'),\r\n          graff: null\r\n        })\r\n      }\r\n      \r\n\r\n     \r\n      let stickerz = this.state.stickers.concat(url);\r\n      this.setState({\r\n        stickers: stickerz\r\n      });\r\n\r\n      this._clearPreview(e);\r\n          \r\n      \r\n    }\r\n  \r\n    _handleImageChange(e) {\r\n      e.preventDefault();\r\n  \r\n      let reader = new FileReader();\r\n      let file = e.target.files[0];\r\n  \r\n      reader.onloadend = () => {\r\n        this.setState({\r\n          file: file,\r\n          imagePreviewUrl: reader.result,\r\n          graff: false\r\n        });\r\n      }\r\n  \r\n      reader.readAsDataURL(file);\r\n\r\n    }\r\n\r\n    _clearPreview(e) {\r\n      e.preventDefault();\r\n      this.setState({\r\n        file: '',\r\n        imagePreviewUrl: ''\r\n      });\r\n\r\n\r\n    }\r\n\r\n    _renderSticker(url) {\r\n      \r\n      return(\r\n        <Sticker url={url}/>       \r\n      )\r\n      \r\n    }\r\n  \r\n    render() {\r\n      let {imagePreviewUrl} = this.state;\r\n      let $imagePreview = null;\r\n      let $fileControls = null;\r\n      let $postButton = null;\r\n      \r\n      if (this.state.graff === null){\r\n        $postButton = null;\r\n      } else if (this.state.graff === true){\r\n        $imagePreview = (<div className=\"previewText\"><Drawer/></div>);\r\n        $postButton = (\r\n          <button className=\"submitButton controls_cust pVr75 _27k0J _2PAY1 _3EpOX _3K_s7 YJMQR _2pMPQ _1G2cJ\" \r\n              type=\"submit\" \r\n              onClick={(e)=>this._handleSubmit(e)}>POST!</button>\r\n        );\r\n      } else {\r\n        $fileControls = (\r\n          <div>\r\n          <input className=\"hidden controls_cust pVr75 _27k0J _2PAY1 _3EpOX _3K_s7 YJMQR _2pMPQ _1G2cJ\" \r\n          title=\"Choose file\"\r\n          type=\"file\" \r\n          id='file-upload'\r\n          onChange={(e)=>this._handleImageChange(e)}               \r\n        />\r\n        <label \r\n          className=\"controls_cust _27k0J _2PAY1 _3EpOX _3K_s7 YJMQR _2pMPQ _1G2cJ\" \r\n          for=\"file-upload\">\r\n          File\r\n        </label>\r\n        <button className=\"controls_cust _27k0J _2PAY1 _3EpOX _3K_s7 YJMQR _2pMPQ _1G2cJ\"\r\n\r\n              onClick={(e) => {\r\n                this._clearPreview(e)\r\n              }}>\r\n              âœ– Clear\r\n        </button> \r\n        </div>\r\n        )\r\n      }\r\n\r\n      if (imagePreviewUrl) {\r\n        $imagePreview = (<img src={imagePreviewUrl} alt=\"\" />);\r\n        $postButton = (\r\n          <button className=\"submitButton controls_cust pVr75 _27k0J _2PAY1 _3EpOX _3K_s7 YJMQR _2pMPQ _1G2cJ\" \r\n              type=\"submit\" \r\n              onClick={(e)=>this._handleSubmit(e)}>POST!</button>\r\n        );\r\n      } else {\r\n        \r\n      }\r\n\r\n    const sticks = this.state.stickers;\r\n      \r\n    let stickers = sticks.map((url) =>\r\n      <div>{this._renderSticker(url)}</div>\r\n    );       \r\n  \r\n      return (        \r\n        <div className=\"previewComponent\">\r\n\r\n          <div>\r\n            <DropdownButton variant=\"cust\" id=\"dropdown-item-button\" title=\"Add Sticker\">              \r\n              <Dropdown.Item variant=\"cust\" as=\"button\"\r\n                onClick={(e) => {\r\n                        e.preventDefault();\r\n                        this.setState({\r\n                          graff: false,\r\n                          imagePreviewUrl: ''\r\n                          })\r\n                      }}\r\n              >Image</Dropdown.Item>\r\n              <Dropdown.Item variant=\"cust\" as=\"button\"\r\n                        onClick={(e) => {\r\n                        e.preventDefault();\r\n                        this.setState({\r\n                          graff: true,\r\n                          imagePreviewUrl: ''\r\n                          })\r\n                      }}>Drawing</Dropdown.Item>              \r\n            </DropdownButton>\r\n          </div>\r\n          <form onSubmit={(e)=>this._handleSubmit(e)}>\r\n            <div className=\"draw_controls\">\r\n                {$fileControls}\r\n\r\n            </div>\r\n          \r\n          <div className=\"imgPreview\">\r\n            \r\n            {$imagePreview}\r\n            {$postButton}\r\n\r\n          </div>\r\n         \r\n          </form>\r\n\r\n        <div>        \r\n          \r\n        </div>\r\n        <div>\r\n          {stickers}               \r\n        </div>\r\n\r\n\r\n          \r\n        </div>\r\n        \r\n      )\r\n    }\r\n  }\r\n\r\n  class Sticker extends React.Component {\r\n    constructor(props) {\r\n      super(props);      \r\n\r\n    }\r\n      render() {\r\n        return (\r\n        <div>\r\n          <div>   \r\n          <div class=\"user_title\">\r\n          <div class=\"_2FCQQ\">\r\n            <img src=\"https://www.ultimate-guitar.com/static/users/4/1/5/8523514.gif?d=d&amp;h=1598365467\" class=\"_377Nx _1dpi8 _1Ln-H\" alt=\"andie.ape\"></img>\r\n          </div>\r\n          <div class=\"user_name\">\r\n            <a class=\"_2KJtL _1ofov kWOod\">user.name</a>\r\n          </div>\r\n          </div>  \r\n          <div class=\"sticker_item\">\r\n           <img src={this.props.url}/>\r\n          </div>   \r\n          \r\n          </div>\r\n          \r\n        </div>\r\n        )\r\n      }\r\n    }\r\n  \r\n\r\n  class Drawer extends React.Component {\r\n    constructor(props){\r\n      super(props);\r\n      this.parent = React.createRef()\r\n      this.state = {\r\n\r\n        value: 12,        \r\n        brushRadius: 12,\r\n        brushColor: \"#444\",\r\n        width: 400,\r\n        height: 200,\r\n        showPicker: false   \r\n\r\n      }\r\n    }\r\n\r\n    _handleColorChange = (color, event) => {\r\n     \r\n      this.setState({ brushColor: color.hex });\r\n     \r\n    };\r\n\r\n    render(){\r\n      \r\n      let $colorPicker = null;\r\n\r\n      if (!this.state.showPicker){\r\n        $colorPicker = (\"\");\r\n      } else {\r\n        $colorPicker = (<BlockPicker \r\n          className=\"picker-block\"\r\n          triangle=\"hide\" \r\n          color={this.state.brushColor}\r\n          onChangeComplete={ this._handleColorChange }\r\n        />);\r\n      }\r\n\r\n      return (\r\n        <div ref={this.parent}>\r\n          <div className=\"draw_controls\">\r\n            <div>\r\n             \r\n              <div className=\"color-btn-wrap controls_cust pVr75 _27k0J _2PAY1 _3EpOX _3K_s7 YJMQR _2pMPQ _1G2cJ\"\r\n              \r\n                onClick={() => {\r\n                    this.setState({\r\n                      showPicker: !this.state.showPicker\r\n                    });                  \r\n                  }}\r\n\r\n              >\r\n               <div style={{\r\n                  backgroundColor: this.state.brushColor}} \r\n                  className='color-btn'               \r\n                  >               \r\n                </div>\r\n                <div>Color</div>\r\n                          \r\n              \r\n              </div>\r\n              \r\n              {$colorPicker}\r\n            </div>\r\n            <div>\r\n              <div className=\"controls_cust pVr75 _27k0J _2PAY1 _3EpOX _3K_s7 YJMQR _2pMPQ _1G2cJ\"\r\n\r\n                  onClick={() => {\r\n                    this.canvasElem.clear();\r\n                    localStorage.setItem('graff', this.canvasElem.canvas.drawing.toDataURL());\r\n                  }}>\r\n                âœ– Clear\r\n              </div>\r\n              <div  className=\" controls_cust pVr75 _27k0J _2PAY1 _3EpOX _3K_s7 YJMQR _2pMPQ _1G2cJ\"           \r\n                  onClick={() => {\r\n                    this.canvasElem.undo();\r\n                    localStorage.setItem('graff', this.canvasElem.canvas.drawing.toDataURL());\r\n                  }}>\r\n                âŽŒ Undo\r\n              </div>\r\n            </div> \r\n            <div class=\"brush div\">\r\n              <input\r\n              class=\"brush input\"\r\n              type=\"range\"\r\n              id=\"brush_size\" name=\"brush\"\r\n              min=\"1\" \r\n              max=\"30\"\r\n              value={this.state.brushRadius}\r\n              step=\"1\"\r\n              onChange={(e) => {    \r\n                this.setState({\r\n                  brushRadius: e.target.value\r\n                })\r\n              }}\r\n              />\r\n              <div class=\"brush label\">\r\n                <label  for=\"brush\">Brush size</label>\r\n              </div>\r\n              \r\n            </div>\r\n\r\n          </div>\r\n          <div>\r\n            <div class='draw_pad'>\r\n                <CanvasDraw \r\n                  onChange={(e) => {    \r\n                    localStorage.setItem('graff', this.canvasElem.canvas.drawing.toDataURL())\r\n                   }}\r\n                  canvasWidth={this.state.width}\r\n                  canvasHeight={this.state.height}\r\n                  brushRadius={this.state.brushRadius}\r\n                  ref={canvasDraw => (this.canvasElem = canvasDraw)}\r\n                  hideGrid\r\n                  brushColor = {this.state.brushColor}\r\n\r\n                />\r\n            </div>\r\n          </div>\r\n        </div>\r\n               \r\n           \r\n        \r\n        \r\n        \r\n            \r\n           \r\n       \r\n        \r\n        \r\n      )\r\n    }\r\n  }\r\n\r\n  \r\n\r\n  ReactDOM.render(\r\n    <StickerBoard />,    \r\n    document.getElementById('root')\r\n  );\r\n"],"sourceRoot":""}